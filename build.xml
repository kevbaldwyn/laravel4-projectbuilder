<?xml version="1.0" encoding="UTF-8"?>
<project name="Laravel Project" default="welcome" basedir="../" description="Laravel Project Build Targets">
	
	<property name="reserved.env.name" value="testing" />
	
	<target name="welcome">
		<echo message="==================================================" />
		<echo message="Hello, welcome to ${phing.project.name} build script!" />
		<echo message="There are 2 options 'install' and 'update'" />
		<echo message="run 'phing install' when installing a new copy" />
		<echo message="run 'phing update' when updating an existing copy" />
		<echo message="==================================================" />
	</target>
	
	
	<target name="update">
		
		<echo message="==================================================" />
		<echo message="Update laravel and run any database migrations." />
		<echo message="You must also have composer and git installed." />
		<echo message="Hit enter to accept defaults." />
		<echo message="Make sure you have updated your local app first." level="warning" />
		<echo message="==================================================" />
	
		<propertyprompt
    		propertyName="env.name"
    		promptText="What is your Laravel environment name?"
    		defaultValue="local"
		/>
	
		<if>
			<isfalse value="${env.name}"/>
			<then>
				<fail message="Invalid environment name!" />
			</then>
			<elseif>
				<equals arg1="${env.name}" arg2="${reserved.env.name}" />
				<then>
					<fail message="Environment name cannot be '${reserved.env.name}'" />
				</then>
			</elseif>
		</if>
		
		<if>
			<available file='app/config/${env.name}' type='dir' />
			<then>
				<!-- do nothing -->
				<echo message="Environment found.." />
			</then>
			<else>
				<fail message="Environment 'app/config/${env.name}' doesn't exist." />
			</else>
		</if>
		
		<!-- composer -->
		<echo message="Checking packages..." />
		<exec 
			command="composer update" 
			passthru="true" 
		/>
		<echo message="Done." />
		
		<!-- migrations -->
		<echo message="Running migrations..." />
		<exec 
			command="php artisan migrate --env=${env.name}" 
			passthru="true" 
		/>
		<echo message="Done." />

	</target>	
	
	
	<target name="install">
		
		<echo message="==================================================" />
		<echo message="Before installing you must have created a database," />
		<echo message="and have the connection details ready." />
		<echo message="You must also have composer and git installed." />
		<echo message="Hit enter to accept defaults." />
		<echo message="==================================================" />
		
		<propertyprompt
    		propertyName="env.name"
    		promptText="What is your Laravel environment name. This will create the directory 'app/config/[your-environment-name]' - do not use '${reserved.env.name}'"
    		defaultValue="local"
		/>
	
		<if>
			<isfalse value="${env.name}"/>
			<then>
				<fail message="Invalid environment name!" />
			</then>
			<elseif>
				<equals arg1="${env.name}" arg2="${reserved.env.name}" />
				<then>
					<fail message="Environment name cannot be '${reserved.env.name}'" />
				</then>
			</elseif>
			<elseif>
				<available file='app/config/${env.name}' type='dir' />
				<then>
					<fail message="The environment 'app/config/${env.name}' already exists." />
				</then>
			</elseif>
		</if>
		
		<propertyprompt
    		propertyName="env.host"
    		promptText="The environment host name of the site, ie 'dev.mylocalserver.local', 'localhost', or 'www.example.com'"
		/>
	
		<if>
			<isfalse value="${env.host}"/>
			<then>
				<fail message="Invalid environment host name!" />
			</then>
		</if>
		
		<echo message="Database settings..." />
		<propertyprompt
    		propertyName="db.host"
    		promptText="Database Host"
    		defaultValue="localhost"
		/>
		<propertyprompt
    		propertyName="db.name"
    		promptText="Database name"
		/>
	
		<if>
			<isfalse value="${db.name}"/>
			<then>
				<fail message="Invalid database name!" />
			</then>
		</if>
		
		<propertyprompt
    		propertyName="db.user"
    		promptText="Database username"
    		defaultValue="root"
		/>
		<propertyprompt
    		propertyName="db.pass"
    		promptText="Database password"
		/>
		<propertyprompt
    		propertyName="db.seedit"
    		promptText="Would you like to seed the database if available, (y/n)"
    		defaultValue="y"
		/>
	
		<if>
			<equals arg1="${db.seedit}" arg2="y" />
			<then>
				<property name="db.seedflag" value="--seed " />
			</then>
			<else>
				<property name="db.seedflag" value="" />
			</else>
		</if>
				
		<!-- configure db -->
		<echo message="Configuring db..." />
		<mkdir  dir="app/config/${env.name}" />
		<if>
			<available file='app/config/${env.name}/database.php' type='file' />
			<then>
				<delete file="app/config/${env.name}/database.php" failonerror="false" />
			</then>
		</if>
		<copy file="build/database.txt" tofile="app/config/${env.name}/database.php" overwrite="true">
			<filterchain>            
				<replaceregexp>
					<regexp pattern="#DB_HOST#" replace="${db.host}" ignoreCase="false" />
					<regexp pattern="#DB_NAME#" replace="${db.name}" ignoreCase="false" />
					<regexp pattern="#DB_USER#" replace="${db.user}" ignoreCase="false" />
					<regexp pattern="#DB_PASS#" replace="${db.pass}" ignoreCase="false" />
				</replaceregexp>
			</filterchain>
		</copy>
		<echo message="Done." />
		
		<echo message="Writing environment..." />
		<if>
			<available file='bootstrap/start-tmp.php' type='file' />
			<then>
				<delete file="bootstrap/start-tmp.php" failonerror="false" />
			</then>
		</if>
		<copy file="bootstrap/start.php" tofile="bootstrap/start-tmp.php" overwrite="true">
			<filterchain>
				<replaceregexp>
					<regexp pattern="detectEnvironment\(array\("  replace="detectEnvironment(array(${line.separator}${line.separator}	'${env.name}' => array('${env.host}')," />
				</replaceregexp>
			</filterchain>
		</copy>
		<delete file="bootstrap/start.php" failonerror="false" />
		<copy file="bootstrap/start-tmp.php" tofile="bootstrap/start.php" overwrite="true" />
		<delete file="bootstrap/start-tmp.php" failonerror="false" />
		<echo message="Done." />
				
		
		<!-- amend .gitignore -->
		<append destFile=".gitignore" text="${line.separator}app/config/${env.name}" />
		
		<!-- composer -->
		<echo message="Checking packages..." />
		<exec 
			command="composer update" 
			passthru="true" 
		/>
		<echo message="Done." />
		
		<!-- migrations -->
		<echo message="Running db migrations..." />
		<exec 
			command="php artisan migrate ${db.seedflag}--env=${env.name}" 
			passthru="true" 
		/>
		<echo message="Done." />
		
	</target>	
	
	
</project>